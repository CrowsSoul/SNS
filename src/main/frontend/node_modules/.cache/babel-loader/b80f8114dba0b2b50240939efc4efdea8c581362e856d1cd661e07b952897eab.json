{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"@/utils/axios\";\nexport default {\n  name: \"RegisterView\",\n  data() {\n    return {\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      nickname: \"\",\n      role: \"\",\n      error: null\n    };\n  },\n  methods: {\n    validatePassword() {\n      const hasUpperCase = /[A-Z]/.test(this.password);\n      const hasLowerCase = /[a-z]/.test(this.password);\n      const hasNumber = /[0-9]/.test(this.password);\n      const LongEnough = this.password.length >= 6;\n      if (!LongEnough) {\n        return \"密码长度至少为6位\";\n      }\n      if (!hasUpperCase) {\n        return \"密码需要包含至少一个大写字母\";\n      }\n      if (!hasLowerCase) {\n        return \"密码需要包含至少一个小写字母\";\n      }\n      if (!hasNumber) {\n        return \"密码需要包含至少一个数字\";\n      }\n      if (this.password !== this.confirmPassword) {\n        return \"两次输入的密码不同\";\n      }\n      return null;\n    },\n    async register() {\n      if (!this.username) {\n        this.error = \"用户名不能为空\";\n        return;\n      }\n      if (!this.password) {\n        this.error = \"密码不能为空\";\n        return;\n      }\n      const passwordError = this.validatePassword();\n      if (passwordError) {\n        this.error = passwordError;\n        return;\n      }\n      if (!this.nickname) {\n        this.error = \"昵称不能为空\";\n        return;\n      }\n      if (!this.role) {\n        this.error = \"请选择身份\";\n        return;\n      }\n      try {\n        // 检查用户名是否已存在\n        const checkUsernameResponse = await axios.get(\"/check-username\", {\n          params: {\n            username: this.username\n          }\n        });\n        if (!checkUsernameResponse.data.available) {\n          this.error = \"用户名已被注册\";\n          return;\n        }\n        const response = await axios.post(\"/register\", {\n          username: this.username,\n          password: this.password,\n          nickname: this.nickname,\n          role: this.role\n        });\n        if (response.data.success) {\n          this.$router.push(\"/login\");\n        } else {\n          this.error = response.data.message;\n        }\n      } catch (error) {\n        this.error = \"注册失败，请稍后再试\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","username","password","confirmPassword","nickname","role","error","methods","validatePassword","hasUpperCase","test","hasLowerCase","hasNumber","LongEnough","length","register","passwordError","checkUsernameResponse","get","params","available","response","post","success","$router","push","message"],"sources":["D:\\Code\\JavaWorkspace\\my-sns\\src\\views\\main\\RegisterView.vue"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"register-page\"\r\n    :style=\"{\r\n      backgroundImage: 'url(' + require('@/assets/background.jpg') + ')',\r\n    }\"\r\n  >\r\n    <div class=\"register-container\">\r\n      <h2>注册</h2>\r\n      <form @submit.prevent=\"register\">\r\n        <div class=\"form-group\">\r\n          <label for=\"username\">用户名</label>\r\n          <input type=\"text\" id=\"username\" v-model=\"username\" required />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"password\">密码</label>\r\n          <input type=\"password\" id=\"password\" v-model=\"password\" required />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"confirmPassword\">确认密码</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"confirmPassword\"\r\n            v-model=\"confirmPassword\"\r\n            required\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"nickname\">昵称</label>\r\n          <input type=\"text\" id=\"nickname\" v-model=\"nickname\" required />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"role\">身份</label>\r\n          <select id=\"role\" v-model=\"role\" required>\r\n            <option value=\"student\">在校学生</option>\r\n            <option value=\"employed_student\">已就业学生</option>\r\n            <option value=\"admin\">管理员</option>\r\n          </select>\r\n        </div>\r\n        <div v-if=\"error\" class=\"error\">{{ error }}</div>\r\n        <button type=\"submit\">注册</button>\r\n      </form>\r\n      <p>已有账号？ <router-link to=\"/login\">登录</router-link></p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"@/utils/axios\";\r\n\r\nexport default {\r\n  name: \"RegisterView\",\r\n  data() {\r\n    return {\r\n      username: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      nickname: \"\",\r\n      role: \"\",\r\n      error: null,\r\n    };\r\n  },\r\n  methods: {\r\n    validatePassword() {\r\n      const hasUpperCase = /[A-Z]/.test(this.password);\r\n      const hasLowerCase = /[a-z]/.test(this.password);\r\n      const hasNumber = /[0-9]/.test(this.password);\r\n      const LongEnough = this.password.length >= 6;\r\n\r\n      if (!LongEnough) {\r\n        return \"密码长度至少为6位\";\r\n      }\r\n\r\n      if (!hasUpperCase) {\r\n        return \"密码需要包含至少一个大写字母\";\r\n      }\r\n\r\n      if (!hasLowerCase) {\r\n        return \"密码需要包含至少一个小写字母\";\r\n      }\r\n\r\n      if (!hasNumber) {\r\n        return \"密码需要包含至少一个数字\";\r\n      }\r\n\r\n      if (this.password !== this.confirmPassword) {\r\n        return \"两次输入的密码不同\";\r\n      }\r\n\r\n      return null;\r\n    },\r\n    async register() {\r\n      if (!this.username) {\r\n        this.error = \"用户名不能为空\";\r\n        return;\r\n      }\r\n      if (!this.password) {\r\n        this.error = \"密码不能为空\";\r\n        return;\r\n      }\r\n\r\n      const passwordError = this.validatePassword();\r\n      if (passwordError) {\r\n        this.error = passwordError;\r\n        return;\r\n      }\r\n\r\n      if (!this.nickname) {\r\n        this.error = \"昵称不能为空\";\r\n        return;\r\n      }\r\n      if (!this.role) {\r\n        this.error = \"请选择身份\";\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // 检查用户名是否已存在\r\n        const checkUsernameResponse = await axios.get(\"/check-username\", {\r\n          params: {\r\n            username: this.username,\r\n          },\r\n        });\r\n\r\n        if (!checkUsernameResponse.data.available) {\r\n          this.error = \"用户名已被注册\";\r\n          return;\r\n        }\r\n\r\n        const response = await axios.post(\"/register\", {\r\n          username: this.username,\r\n          password: this.password,\r\n          nickname: this.nickname,\r\n          role: this.role,\r\n        });\r\n\r\n        if (response.data.success) {\r\n          this.$router.push(\"/login\");\r\n        } else {\r\n          this.error = response.data.message;\r\n        }\r\n      } catch (error) {\r\n        this.error = \"注册失败，请稍后再试\";\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.register-page {\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-size: cover;\r\n  background-position: center;\r\n  text-align: center;\r\n}\r\n\r\n.register-container {\r\n  background: rgba(255, 255, 255, 0.8);\r\n  padding: 20px;\r\n  border-radius: 30px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  width: 400px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.form-group input,\r\n.form-group select {\r\n  width: 70%;\r\n  padding: 8px;\r\n  box-sizing: border-box;\r\n  border-radius: 20px;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\nbutton {\r\n  width: 30%;\r\n  padding: 10px;\r\n  background: #42b983;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  margin: 20px;\r\n}\r\n\r\nbutton:hover {\r\n  background: #358a66;\r\n}\r\n\r\n.error {\r\n  color: red;\r\n  margin-bottom: 10px;\r\n}\r\n</style>\r\n"],"mappings":";AAgDA,OAAOA,KAAI,MAAO,eAAe;AAEjC,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE,EAAE;MACnBC,QAAQ,EAAE,EAAE;MACZC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,gBAAgBA,CAAA,EAAG;MACjB,MAAMC,YAAW,GAAI,OAAO,CAACC,IAAI,CAAC,IAAI,CAACR,QAAQ,CAAC;MAChD,MAAMS,YAAW,GAAI,OAAO,CAACD,IAAI,CAAC,IAAI,CAACR,QAAQ,CAAC;MAChD,MAAMU,SAAQ,GAAI,OAAO,CAACF,IAAI,CAAC,IAAI,CAACR,QAAQ,CAAC;MAC7C,MAAMW,UAAS,GAAI,IAAI,CAACX,QAAQ,CAACY,MAAK,IAAK,CAAC;MAE5C,IAAI,CAACD,UAAU,EAAE;QACf,OAAO,WAAW;MACpB;MAEA,IAAI,CAACJ,YAAY,EAAE;QACjB,OAAO,gBAAgB;MACzB;MAEA,IAAI,CAACE,YAAY,EAAE;QACjB,OAAO,gBAAgB;MACzB;MAEA,IAAI,CAACC,SAAS,EAAE;QACd,OAAO,cAAc;MACvB;MAEA,IAAI,IAAI,CAACV,QAAO,KAAM,IAAI,CAACC,eAAe,EAAE;QAC1C,OAAO,WAAW;MACpB;MAEA,OAAO,IAAI;IACb,CAAC;IACD,MAAMY,QAAQA,CAAA,EAAG;MACf,IAAI,CAAC,IAAI,CAACd,QAAQ,EAAE;QAClB,IAAI,CAACK,KAAI,GAAI,SAAS;QACtB;MACF;MACA,IAAI,CAAC,IAAI,CAACJ,QAAQ,EAAE;QAClB,IAAI,CAACI,KAAI,GAAI,QAAQ;QACrB;MACF;MAEA,MAAMU,aAAY,GAAI,IAAI,CAACR,gBAAgB,CAAC,CAAC;MAC7C,IAAIQ,aAAa,EAAE;QACjB,IAAI,CAACV,KAAI,GAAIU,aAAa;QAC1B;MACF;MAEA,IAAI,CAAC,IAAI,CAACZ,QAAQ,EAAE;QAClB,IAAI,CAACE,KAAI,GAAI,QAAQ;QACrB;MACF;MACA,IAAI,CAAC,IAAI,CAACD,IAAI,EAAE;QACd,IAAI,CAACC,KAAI,GAAI,OAAO;QACpB;MACF;MAEA,IAAI;QACF;QACA,MAAMW,qBAAoB,GAAI,MAAMnB,KAAK,CAACoB,GAAG,CAAC,iBAAiB,EAAE;UAC/DC,MAAM,EAAE;YACNlB,QAAQ,EAAE,IAAI,CAACA;UACjB;QACF,CAAC,CAAC;QAEF,IAAI,CAACgB,qBAAqB,CAACjB,IAAI,CAACoB,SAAS,EAAE;UACzC,IAAI,CAACd,KAAI,GAAI,SAAS;UACtB;QACF;QAEA,MAAMe,QAAO,GAAI,MAAMvB,KAAK,CAACwB,IAAI,CAAC,WAAW,EAAE;UAC7CrB,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBE,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,IAAI,EAAE,IAAI,CAACA;QACb,CAAC,CAAC;QAEF,IAAIgB,QAAQ,CAACrB,IAAI,CAACuB,OAAO,EAAE;UACzB,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;QAC7B,OAAO;UACL,IAAI,CAACnB,KAAI,GAAIe,QAAQ,CAACrB,IAAI,CAAC0B,OAAO;QACpC;MACF,EAAE,OAAOpB,KAAK,EAAE;QACd,IAAI,CAACA,KAAI,GAAI,YAAY;MAC3B;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}