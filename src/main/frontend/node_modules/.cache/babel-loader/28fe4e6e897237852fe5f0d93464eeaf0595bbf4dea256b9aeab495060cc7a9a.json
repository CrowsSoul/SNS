{"ast":null,"code":"import axios from \"@/utils/axios\";\nexport default {\n  name: \"AdminCommentReview\",\n  data() {\n    return {\n      comments: [],\n      blogs: [],\n      currentPage: 1,\n      commentsPerPage: 3\n    };\n  },\n  computed: {\n    reportedComments() {\n      return this.comments.filter(comment => comment.isReported === true);\n    },\n    paginatedComments() {\n      const start = (this.currentPage - 1) * this.commentsPerPage;\n      const end = start + this.commentsPerPage;\n      return this.reportedComments.slice(start, end);\n    },\n    totalPages() {\n      return Math.ceil(this.reportedComments.length / this.commentsPerPage);\n    }\n  },\n  methods: {\n    async fetchComments() {\n      try {\n        const response = await axios.get(\"/comments\");\n        this.comments = response.data;\n        await this.fetchBlogs(); // 确保先获取评论后获取博文\n      } catch (error) {\n        console.error(\"获取评论列表失败\", error);\n      }\n    },\n    async fetchBlogs() {\n      try {\n        const response = await axios.get(\"/blogs\");\n        this.blogs = response.data;\n      } catch (error) {\n        console.error(\"获取博文列表失败\", error);\n      }\n    },\n    getBlogTitle(blogId) {\n      const blog = this.blogs.find(b => b.id === blogId);\n      return blog ? blog.title : \"未知博文\";\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    }\n  },\n  created() {\n    this.fetchComments();\n  }\n};","map":{"version":3,"names":["axios","name","data","comments","blogs","currentPage","commentsPerPage","computed","reportedComments","filter","comment","isReported","paginatedComments","start","end","slice","totalPages","Math","ceil","length","methods","fetchComments","response","get","fetchBlogs","error","console","getBlogTitle","blogId","blog","find","b","id","title","nextPage","prevPage","created"],"sources":["D:\\Code\\Project\\SNSproject\\SNS\\src\\main\\frontend\\src\\views\\blog\\admin\\AdminCommentReview.vue"],"sourcesContent":["<template>\r\n  <div class=\"admin-comment-review\">\r\n    <h1>评论审核</h1>\r\n    <div class=\"comment-list\">\r\n      <ul v-if=\"paginatedComments.length > 0\">\r\n        <li v-for=\"comment in paginatedComments\" :key=\"comment.id\">\r\n          <p>{{ comment.content }}</p>\r\n          <p>评论者: {{ comment.author }}</p>\r\n          <p>博文: {{ getBlogTitle(comment.blogId) }}</p>\r\n          <router-link\r\n            :to=\"{ name: 'AdminCommentDetail', params: { id: comment.id } }\"\r\n            class=\"action-button\"\r\n            >查看详情</router-link\r\n          >\r\n        </li>\r\n      </ul>\r\n      <div v-else>\r\n        <p>暂无被举报的评论~</p>\r\n      </div>\r\n      <div class=\"pagination\" v-if=\"totalPages > 1\">\r\n        <button @click=\"prevPage\" :disabled=\"currentPage === 1\">上一页</button>\r\n        <span>第 {{ currentPage }} 页，共 {{ totalPages }} 页</span>\r\n        <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">\r\n          下一页\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"@/utils/axios\";\r\n\r\nexport default {\r\n  name: \"AdminCommentReview\",\r\n  data() {\r\n    return {\r\n      comments: [],\r\n      blogs: [],\r\n      currentPage: 1,\r\n      commentsPerPage: 3,\r\n    };\r\n  },\r\n  computed: {\r\n    reportedComments() {\r\n      return this.comments.filter((comment) => comment.isReported === true);\r\n    },\r\n    paginatedComments() {\r\n      const start = (this.currentPage - 1) * this.commentsPerPage;\r\n      const end = start + this.commentsPerPage;\r\n      return this.reportedComments.slice(start, end);\r\n    },\r\n    totalPages() {\r\n      return Math.ceil(this.reportedComments.length / this.commentsPerPage);\r\n    },\r\n  },\r\n  methods: {\r\n    async fetchComments() {\r\n      try {\r\n        const response = await axios.get(\"/comments\");\r\n        this.comments = response.data;\r\n        await this.fetchBlogs(); // 确保先获取评论后获取博文\r\n      } catch (error) {\r\n        console.error(\"获取评论列表失败\", error);\r\n      }\r\n    },\r\n    async fetchBlogs() {\r\n      try {\r\n        const response = await axios.get(\"/blogs\");\r\n        this.blogs = response.data;\r\n      } catch (error) {\r\n        console.error(\"获取博文列表失败\", error);\r\n      }\r\n    },\r\n    getBlogTitle(blogId) {\r\n      const blog = this.blogs.find((b) => b.id === blogId);\r\n      return blog ? blog.title : \"未知博文\";\r\n    },\r\n    nextPage() {\r\n      if (this.currentPage < this.totalPages) {\r\n        this.currentPage++;\r\n      }\r\n    },\r\n    prevPage() {\r\n      if (this.currentPage > 1) {\r\n        this.currentPage--;\r\n      }\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchComments();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.admin-comment-review {\r\n  padding: 20px;\r\n  background: #f9f9f9;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n}\r\n\r\n.comment-list ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.comment-list li {\r\n  background: white;\r\n  padding: 20px;\r\n  margin-bottom: 10px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.comment-list li p {\r\n  margin: 10px 0;\r\n}\r\n\r\n.action-button {\r\n  padding: 10px 20px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 10px;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  text-align: center;\r\n  text-decoration: none;\r\n}\r\n\r\n.action-button:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.pagination {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 20px;\r\n}\r\n\r\n.pagination button {\r\n  padding: 10px 20px;\r\n  background-color: #42b983;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 10px;\r\n  cursor: pointer;\r\n}\r\n\r\n.pagination button:hover {\r\n  background-color: #358a66;\r\n}\r\n</style>\r\n"],"mappings":"AA+BA,OAAOA,KAAI,MAAO,eAAe;AAEjC,eAAe;EACbC,IAAI,EAAE,oBAAoB;EAC1BC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE,CAAC;MACdC,eAAe,EAAE;IACnB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,gBAAgBA,CAAA,EAAG;MACjB,OAAO,IAAI,CAACL,QAAQ,CAACM,MAAM,CAAEC,OAAO,IAAKA,OAAO,CAACC,UAAS,KAAM,IAAI,CAAC;IACvE,CAAC;IACDC,iBAAiBA,CAAA,EAAG;MAClB,MAAMC,KAAI,GAAI,CAAC,IAAI,CAACR,WAAU,GAAI,CAAC,IAAI,IAAI,CAACC,eAAe;MAC3D,MAAMQ,GAAE,GAAID,KAAI,GAAI,IAAI,CAACP,eAAe;MACxC,OAAO,IAAI,CAACE,gBAAgB,CAACO,KAAK,CAACF,KAAK,EAAEC,GAAG,CAAC;IAChD,CAAC;IACDE,UAAUA,CAAA,EAAG;MACX,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACV,gBAAgB,CAACW,MAAK,GAAI,IAAI,CAACb,eAAe,CAAC;IACvE;EACF,CAAC;EACDc,OAAO,EAAE;IACP,MAAMC,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMtB,KAAK,CAACuB,GAAG,CAAC,WAAW,CAAC;QAC7C,IAAI,CAACpB,QAAO,GAAImB,QAAQ,CAACpB,IAAI;QAC7B,MAAM,IAAI,CAACsB,UAAU,CAAC,CAAC,EAAE;MAC3B,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAClC;IACF,CAAC;IACD,MAAMD,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAMF,QAAO,GAAI,MAAMtB,KAAK,CAACuB,GAAG,CAAC,QAAQ,CAAC;QAC1C,IAAI,CAACnB,KAAI,GAAIkB,QAAQ,CAACpB,IAAI;MAC5B,EAAE,OAAOuB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAClC;IACF,CAAC;IACDE,YAAYA,CAACC,MAAM,EAAE;MACnB,MAAMC,IAAG,GAAI,IAAI,CAACzB,KAAK,CAAC0B,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAC,KAAMJ,MAAM,CAAC;MACpD,OAAOC,IAAG,GAAIA,IAAI,CAACI,KAAI,GAAI,MAAM;IACnC,CAAC;IACDC,QAAQA,CAAA,EAAG;MACT,IAAI,IAAI,CAAC7B,WAAU,GAAI,IAAI,CAACW,UAAU,EAAE;QACtC,IAAI,CAACX,WAAW,EAAE;MACpB;IACF,CAAC;IACD8B,QAAQA,CAAA,EAAG;MACT,IAAI,IAAI,CAAC9B,WAAU,GAAI,CAAC,EAAE;QACxB,IAAI,CAACA,WAAW,EAAE;MACpB;IACF;EACF,CAAC;EACD+B,OAAOA,CAAA,EAAG;IACR,IAAI,CAACf,aAAa,CAAC,CAAC;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}